Given the head of a singly linked list, reorder the list to follow the pattern: L0 → Ln → L1 → Ln-1 → L2 → Ln-2 → …
Input: head = [1, 2, 3, 4, 5]
Output: head = [1, 5, 2, 4, 3]

class Node {
    int val;
    Node next;
    Node(int val) { this.val = val; }
}

Node changeOrder(Node head) {
    if (head == null || head.next == null) {
        return head;
    }
    
    // Step 1: Find the middle of the list
    Node middle = findMiddle(head);
    
    // Step 2: Reverse the second half of the list
    Node secondHead = reverse(middle.next);
    middle.next = null; // Cut the list to prevent cycles
    
    // Step 3: Merge the two halves
    return merge(head, secondHead);
}

// Helper function to find the middle of the list
Node findMiddle(Node head) {
    Node slow = head;
    Node fast = head;
    
    while (fast != null && fast.next != null) {
        slow = slow.next;
        fast = fast.next.next;
    }
    return slow;
}

// Helper function to reverse a list
Node reverse(Node head) {
    Node prev = null;
    Node current = head;
    
    while (current != null) {
        Node next = current.next;
        current.next = prev;
        prev = current;
        current = next;
    }
    return prev; // New head of the reversed list
}

// Helper function to merge two lists in the required order
Node merge(Node head1, Node head2) {
    Node p1 = head1;
    Node p2 = head2;
    
    while (p2 != null) {
        Node temp1 = p1.next;
        Node temp2 = p2.next;
        
        p1.next = p2;
        if (temp1 == null) break;
        
        p2.next = temp1;
        p1 = temp1;
        p2 = temp2;
    }
    return head1;
}
