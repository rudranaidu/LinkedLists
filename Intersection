https://www.youtube.com/watch?v=0JHQ26NQcPk
use two pointers.
first find which list is lengthier. then forward the pointer to difference of lengths
Once two pointers are equal lenghts then forward both the pointers and compare the nodes. 
if there is any node equal then that node would become intersection point.

Node findIntersection(Node head1, Node head2) {
    if (head1 == null || head2 == null) {
        return null; // No intersection if either head is null
    }
    
    int firstListLength = findLength(head1);
    int secondListLength = findLength(head2);
    Node p1 = head1;
    Node p2 = head2;
    
    // Adjust the starting point of the longer list
    while (firstListLength > secondListLength) {
        p1 = p1.next;
        firstListLength--;
    }
    while (secondListLength > firstListLength) {
        p2 = p2.next;
        secondListLength--;
    }
    
    // Traverse both lists in sync and find the intersection point
    while (p1 != null && p2 != null) {
        if (p1 == p2) {  // Intersection found
            return p1;
        }
        p1 = p1.next;
        p2 = p2.next;
    }
    
    return null;  // No intersection found
}

// Helper function to calculate the length of a linked list
int findLength(Node head) {
    int length = 0;
    while (head != null) {
        length++;
        head = head.next;
    }
    return length;
}

2nd Method:

Node findIntersectionOfTwoLists(Node head1, Node head2) {
    if (head1 == null || head2 == null) {
        return null;
    }

    Node p1 = head1;
    Node p2 = head2;

    // Traverse both lists; when either pointer reaches the end, switch to the other list's head
    while (p1 != p2) {
        p1 = (p1 == null) ? head2 : p1.next;
        p2 = (p2 == null) ? head1 : p2.next;
    }

    // If p1 and p2 meet, thatâ€™s the intersection node, otherwise they will both be null
    return p1; // This is either the intersection node or null if no intersection exists
}
