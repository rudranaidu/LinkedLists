Detect a Cycle in a Linked List (2 pointers)

import java.util.HashMap;
import java.util.Map;

// Node class represents a
// node in a linked list
class Node {
    // Data stored in the node
    public int data;   
    // Pointer to the next node in the list
    public Node next;  

    // Constructor with both data
    // and next node as parameters
    public Node(int data, Node next) {
        this.data = data;
        this.next = next;
    }

    // Constructor with only data as
    // a parameter, sets next to null
    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class Main {

    // Function to detect a loop in a linked list
    // using the Tortoise and Hare Algorithm
    public static boolean detectCycle(Node head) {
        // Initialize two pointers, slow and fast,
        // to the head of the linked list
        Node slow = head;
        Node fast = head;

        // Step 2: Traverse the linked list
        // with the slow and fast pointers
        while (fast != null && fast.next != null) {
            // Move slow one step
            slow = slow.next;
            // Move fast two steps
            fast = fast.next.next;

            // Check if slow and fast pointers meet
            if (slow == fast) {
                return true;  // Loop detected
            }
        }

        // If fast reaches the end of the
        // list, there is no loop
        return false;
    }


    public static void main(String[] args) {
        // Create a sample linked list
        // with a loop for testing
        Node head = new Node(1);
        Node second = new Node(2);
        Node third = new Node(3);
        Node fourth = new Node(4);
        Node fifth = new Node(5);

        head.next = second;
        second.next = third;
        third.next = fourth;
        fourth.next = fifth;
        // Create a loop
        fifth.next = third;

        // Check if there is a loop
        // in the linked list
        if (detectCycle(head)) {
            System.out.println("Loop detected in the linked list.");
        } else {
            System.out.println("No loop detected in the linked list.");
        }



import java.util.HashMap;

// Node class represents a node
// in a linked list
class Node {
    // Data stored in the node
    int data;        
    // Pointer to the next node in the list
    Node next;      

    // Constructor with both data
    // and next node as parameters
    Node(int data1, Node next1) {
        data = data1;
        next = next1;
    }

    // Constructor with only data as
    // a parameter, sets next to null
    Node(int data1) {
        data = data1;
        next = null;
    }
}

Find length of Cycle of Loop

Find the loop’s length
When slow == fast, keep one pointer fixed.
Move the other pointer until it meets again, counting steps → that count = cycle length.

int findLengthOfLoop(Node head) {
    if (head == null || head.next == null) {
        return 0; // no cycle
    }

    Node slow = head;
    Node fast = head;

    // Step 1: Detect cycle
    while (fast != null && fast.next != null) {
        slow = slow.next;
        fast = fast.next.next;

        // Cycle detected
        if (slow == fast) {
            // Step 2: Measure cycle length
            return countCycleLength(slow);
        }
    }

    // No cycle found
    return 0;
}

private int countCycleLength(Node meetingPoint) {
    Node current = meetingPoint;
    int count = 1;

    while (current.next != meetingPoint) {
        current = current.next;
        count++;
    }
    return count;
}

How to Find the Cycle Start Node (Full Explanation)

After detecting a cycle (when slow == fast):
Move one pointer back to head.
Keep the other at meeting point.
Move both one step at a time.
The point where they meet = start of cycle ✅

Node findStartOfCycle(Node head) {
    Node slow = head, fast = head;

    // Step 1: Detect cycle
    while (fast != null && fast.next != null) {
        slow = slow.next;
        fast = fast.next.next;
        if (slow == fast) break;
    }

    // No cycle
    if (fast == null || fast.next == null) return null;

    // Step 2: Move one pointer to head
    slow = head;

    // Step 3: Move both one step at a time until they meet
    while (slow != fast) {
        slow = slow.next;
        fast = fast.next;
    }

    return slow; // start of cycle
}
