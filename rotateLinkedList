Rotate first K nodes
----------------------------------------

Start with the first K people

Break and reattach their hands one by one, so they start pointing backward.
After reversing K, connect the last person in reversed group to the rest of the line (D â†’ E).
Return the new head (which is the last person you reversed).

class Node {
    int value;
    Node next;
}

Node reverseKNodes(Node head, int k) {
    if (head == null || k <= 0) {
        throw new IllegalArgumentException("Invalid input");
    }

    // Step 1: Check if we have at least k nodes to reverse
    Node temp = head;
    int count = 0;
    while (temp != null && count < k) {
        temp = temp.next;
        count++;
    }

    if (count < k) {
        throw new IllegalArgumentException("List is smaller than K");
    }

    // Step 2: Reverse K nodes
    Node prev = null;
    Node current = head;
    Node next = null;
    count = 0;

    while (current != null && count < k) {
        next = current.next;  // Save next node
        current.next = prev;  // Reverse pointer
        prev = current;       // Move prev ahead
        current = next;       // Move current ahead
        count++;
    }

    // Step 3: Connect the rest of the list
    if (head != null) {
        head.next = current;  // Original head is now the tail of the reversed part
    }

    // Step 4: Return new head
    return prev;  // New head is the last node we reversed
}












--------------------------------
Rotate list by K nodes
--------------------------------
https://www.youtube.com/watch?v=uT7YI7XbTY8&list=PLgUwDviBIf0rAuz8tVcM0AymmhTRsfaLU&index=24&ab_channel=takeUforward

1) find length and tail nodes
2) connect tail node to head
3) find new head by iterating to length -k nodes
4) set new head node next to null
5) return new head node



class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class RotateLinkedList {
    public static Node rotateListByK(Node head, int k) {
        // Edge cases: empty list or no rotation needed
        if (head == null || k <= 0) return head;

        // Find the length of the list and the tail node
        int len = 1;
        Node tail = head;
        while (tail.next != null) {
            len++;
            tail = tail.next;
        }

        // Normalize k to avoid unnecessary rotations
        k = k % len;
        if (k == 0) return head;

        // Connect the tail to the head to form a circular list
        tail.next = head;

        // Find the new last node (len - k steps from the head)
        Node newLastNode = findNthNode(head, len - k);

        // Update head to the new starting node
        head = newLastNode.next;

        // Break the circular connection
        newLastNode.next = null;

        return head;
    }

    private static Node findNthNode(Node head, int n) {
        Node temp = head;
        int count = 1;

        while (temp != null) {
            if (count == n) return temp;
            count++;
            temp = temp.next;
        }

        // This should not be reached if the input is valid
        return null;
    }

    // Helper function to print the linked list
    public static void printList(Node head) {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " -> ");
            current = current.next;
        }
        System.out.println("null");
    }

    public static void main(String[] args) {
        // Example usage
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);
        head.next.next.next.next = new Node(5);

        System.out.println("Original List:");
        printList(head);

        head = rotateListByK(head, 2);

        System.out.println("Rotated List:");
        printList(head);
    }
}
