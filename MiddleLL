Find middle in linked list
                                
import java.util.*;

// Node class represents a node in a linked list
class Node {
    // Data stored in the node
    int data; 
     // Pointer to the next node in the list
    Node next;     

    // Constructor with both data
    // and next node as parameters
    Node(int data, Node next) {
        this.data = data;
        this.next = next;
    }

    // Constructor with only data as
    // a parameter, sets next to null
    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class FindMiddleOfLinkedList {
    
    static Node findMiddle(Node head) {
        // Initialize the slow pointer to the head.
        Node slow = head; 
        
        // Initialize the fast pointer to the head.
        Node fast = head;   

        // Traverse the linked list using
        // the Tortoise and Hare algorithm.
        while (fast != null && fast.next != null && slow != null) {
            // Move fast two steps.
            fast = fast.next.next;  
            // Move slow one step.
            slow = slow.next;        
        }
        // Return the slow pointer,
        // which is now at the middle node.
        return slow;  
    }


    public static void main(String[] args) {
        // Creating a sample linked list:
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);
        head.next.next.next.next = new Node(5);

        // Find the middle node
        Node middleNode = findMiddle(head);

        // Display the value of the middle node
        System.out.println("The middle node value is: " + middleNode.data);
    }
}

2nd approach:

int findMiddle(Node head) {
    int length = findLength(head);
    int mid = length / 2; // No need to handle odd/even separately

    return getRequiredNode(mid, head);
}

int findLength(Node head) {
    int length = 0;
    while (head != null) {
        head = head.next;
        length++;
    }
    return length;
}

int getRequiredNode(int requiredNode, Node head) {
    while (requiredNode > 0 && head != null) {
        head = head.next;
        requiredNode--;
    }
    return head != null ? head.value : -1; // Handle case if 'requiredNode' is out of bounds
}

