class node {
  int data;
  node next;
  node(int d) {
    data = d;
    next = null;
  }
}

class Main {

  public static void main(String args[]) {
    node head = new node(15);
    head.next = new node(10);
    head.next.next = new node(12);
    head.next.next.next = new node(20);
    head.next.next.next.next = head.next;
   loopDetDelOptimal(head);
    if (FLD(head)) {
      System.out.println("Loop Detected");
    } else System.out.println("Loop not detected");
  }

  static void loopDetDelOptimal(node head) { // Floyd Cycle Detection Algorithm
    node slow = head;
    node fast = head;

    while (fast != null && fast.next != null) {
      slow = slow.next;
      fast = fast.next.next;
      if (slow == fast) {
        break;
      }
    }
    if (slow != fast) return;

    // Loop Removal Algorithm
    slow = head;
    // checking for intersection of two pointers
    while (slow.next != fast.next) {
      slow = slow.next;
      fast = fast.next;
    }
    // loop termination
    fast.next = null;
  }

  public static boolean FLD(node head) {
    node slow = head;
    node fast = head;
    while (fast != null && fast.next != null) {
      slow = slow.next;
      fast = fast.next.next;
      if (slow == fast) return true;
    }
    return false;
  }
}
