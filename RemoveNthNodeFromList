x Remove N-th Node from End of List
Description: Given the head of a linked list, remove the n-th node from the end and return the modified list.
Input: head = [1, 2, 3, 4, 5], n = 2
Output: head = [1, 2, 3, 5]
Hint: Use two pointers where one starts n nodes ahead. When the first pointer reaches the end, the second pointer will be at the node to be removed.


Node removeNthNodeFromEnd(Node head, int n) {
    if (head == null) {
        return null;
    }
    Node dummy = new Node(0); // Create a dummy node to handle edge cases
    dummy.next = head;
    Node firstPointer = dummy;
    Node secondPointer = dummy;
    // Step 1: Move firstPointer `n + 1` nodes ahead
    for (int i = 0; i <= n; i++) {
        if (firstPointer == null) return head; // If `n` is out of bounds
        firstPointer = firstPointer.next;
    }
    // Step 2: Move both pointers until firstPointer reaches the end
    while (firstPointer != null) {
        firstPointer = firstPointer.next;
        secondPointer = secondPointer.next;
    }
    // Step 3: Now, secondPointer.next is the node to remove
    secondPointer.next = secondPointer.next.next;
    return dummy.next; // Return the new head, skipping the dummy node
}
